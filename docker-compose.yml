version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: agb_postgres
    environment:
      POSTGRES_DB: agb_passports
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    networks:
      - agb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: agb_backend
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/agb_passports
      ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/agb_passports
      SECRET_KEY: your-secret-key-here-change-in-production
      DEBUG: "True"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agb_network
    volumes:
      - ./Номенклатура алмазный инстурмент ALFA.xlsx:/app/nomenclature.xlsx
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: agb_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - agb_network
    restart: unless-stopped

  # Сервис для загрузки номенклатур
  nomenclature_loader:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: agb_nomenclature_loader
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/agb_passports
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agb_network
    volumes:
      - ./Номенклатура алмазный инстурмент ALFA.xlsx:/app/nomenclature.xlsx
    command: ["python", "load_nomenclature.py"]
    restart: "no"

volumes:
  postgres_data:

networks:
  agb_network:
    driver: bridge
