#!/usr/bin/env python3
"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AGB Passports
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import pandas as pd
import hashlib
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.models import Base, User, VEDNomenclature, VedPassport, PassportCounter
from backend.database import get_db_url

class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É AGB Passports"""

    def __init__(self):
        self.database_url = get_db_url()
        self.engine = create_engine(self.database_url)
        self.Session = sessionmaker(bind=self.engine)

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            Base.metadata.create_all(bind=self.engine)
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            return False

    def create_admin_user(self, db):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
            admin_user = db.query(User).filter(User.role == "admin").first()

            if admin_user:
                print("üëë –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return admin_user

            print("üëë –°–æ–∑–¥–∞—é —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞...")

            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
            password = "admin"
            password_hash = f"sha256${hashlib.sha256(password.encode()).hexdigest()}"

            admin = User(
                username="admin",
                email="admin@agb-passports.ru",
                full_name="–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                hashed_password=password_hash,
                role="admin",
                is_active=True
            )

            db.add(admin)
            db.commit()
            db.refresh(admin)

            print("‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"            print(f"   –õ–æ–≥–∏–Ω: {admin.username}")
            print(f"   –ü–∞—Ä–æ–ª—å: {password}")
            print(f"   –†–æ–ª—å: {admin.role}")

            return admin

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            db.rollback()
            return None

    def load_nomenclature_from_excel(self, excel_file_path: str, db):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ Excel —Ñ–∞–π–ª–∞"""

        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.read_excel(excel_file_path, header=1)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 1

            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω Excel —Ñ–∞–π–ª: {excel_file_path}")
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
            print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            db.query(VEDNomenclature).delete()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            loaded_count = 0

            for index, row in df.iterrows():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if pd.isna(row.get('–ö–æ–¥ 1–°')) or pd.isna(row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')):
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    name = str(row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ''))
                    code_1c = str(row.get('–ö–æ–¥ 1–°', ''))
                    article = str(row.get('–ê—Ä—Ç–∏–∫—É–ª', ''))

                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–æ–Ω–∫–∏
                    matrix = 'NQ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    drilling_depth = '05-07'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    height = '12'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É (NQ, HQ, PQ, etc.)
                    if 'NQ' in name:
                        matrix = 'NQ'
                    elif 'HQ' in name:
                        matrix = 'HQ'
                    elif 'PQ' in name:
                        matrix = 'PQ'
                    elif 'BQ' in name:
                        matrix = 'BQ'

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è
                    import re
                    depth_match = re.search(r'(\d{2}-\d{2})', name)
                    if depth_match:
                        drilling_depth = depth_match.group(1)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Å–æ—Ç—É
                    height_match = re.search(r'–≤—ã—Å–æ—Ç–∞ (\d+) –º–º', name)
                    if height_match:
                        height = height_match.group(1)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è
                    product_type = '–∫–æ—Ä–æ–Ω–∫–∞'
                    if '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å' in name.lower():
                        product_type = '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å'
                    elif '–±–∞—à–º–∞–∫' in name.lower():
                        product_type = '–±–∞—à–º–∞–∫'

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
                    nomenclature = VEDNomenclature(
                        code_1c=code_1c,
                        name=name,
                        article=article,
                        matrix=matrix,
                        drilling_depth=drilling_depth,
                        height=height,
                        thread='',
                        product_type=product_type,
                        is_active=True
                    )

                    db.add(nomenclature)
                    loaded_count += 1

                    if loaded_count % 5 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded_count} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä...")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index+1}: {e}")
                    continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
            return False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""

        print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö AGB Passports...")
        print("=" * 50)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if not self.create_tables():
            return False

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = self.Session()

        try:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
            admin = self.create_admin_user(db)
            if not admin:
                return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            excel_file = os.path.join(os.path.dirname(__file__), "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∞–ª–º–∞–∑–Ω—ã–π –∏–Ω—Å—Ç—É—Ä–º–µ–Ω—Ç ALFA.xlsx")

            if not os.path.exists(excel_file):
                print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
                return False

            if not self.load_nomenclature_from_excel(excel_file, db):
                return False

            print("=" * 50)
            print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("")
            print("üìã –†–µ–∑—é–º–µ:")
            print(f"   üëë –ê–¥–º–∏–Ω: {admin.username} ({admin.email})")
            print(f"   üì¶ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {db.query(VEDNomenclature).count()}")
            print(f"   üìÑ –ü–∞—Å–ø–æ—Ä—Ç–æ–≤: {db.query(VedPassport).count()}")
            print("")
            print("üåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:")
            print("   Frontend: http://localhost:3001")
            print("   Backend API: http://localhost:8000")
            print("   API Docs: http://localhost:8000/docs")
            print("")
            print("üîë –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
            print("   –ê–¥–º–∏–Ω: admin / admin")
            print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: testuser / test123")

            return True

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            db.rollback()
            return False

        finally:
            db.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    loader = DataLoader()
    success = loader.run()

    if success:
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == "__main__":
    exit(main())
