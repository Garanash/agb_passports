"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ Excel —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import sys
import os
from sqlalchemy.orm import Session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.database import get_db, engine
from backend.models import VEDNomenclature

def load_nomenclature_from_excel(excel_file_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(excel_file_path, header=1)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 1
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω Excel —Ñ–∞–π–ª: {excel_file_path}")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Session(engine)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        from backend.models import Base
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        try:
            db.query(VEDNomenclature).delete()
            db.commit()
            print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {e}")
            db.rollback()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        loaded_count = 0
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Å—Ç—Ä–æ–∫...")
        
        for index in range(len(df)):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
                columns = list(df.columns)
                if len(columns) < 3:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ {index+1}")
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
                # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [–ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ö–æ–¥]
                article = str(df.iloc[index, 0]) if not pd.isna(df.iloc[index, 0]) else ''
                name = str(df.iloc[index, 1]) if not pd.isna(df.iloc[index, 1]) else ''
                code_1c = str(df.iloc[index, 2]) if not pd.isna(df.iloc[index, 2]) else ''
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not article or not code_1c or not name:
                    print(f"‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ {index+1}: article='{article}', code_1c='{code_1c}', name='{name}'")
                    continue
                
                print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {index+1}: {article} | {code_1c} | {name}")
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–æ–Ω–∫–∏
                matrix = 'NQ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                drilling_depth = '05-07'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                height = '12'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É (NQ, HQ, PQ, etc.)
                if 'NQ' in name:
                    matrix = 'NQ'
                elif 'HQ' in name:
                    matrix = 'HQ'
                elif 'PQ' in name:
                    matrix = 'PQ'
                elif 'BQ' in name:
                    matrix = 'BQ'
                elif 'HWT' in name:
                    matrix = 'HWT'
                elif 'PWT' in name:
                    matrix = 'PWT'
                elif 'HQ3' in name:
                    matrix = 'HQ3'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è
                import re
                depth_match = re.search(r'(\d{2}-\d{2})', name)
                if depth_match:
                    drilling_depth = depth_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Å–æ—Ç—É
                height_match = re.search(r'–≤—ã—Å–æ—Ç–∞ (\d+) –º–º', name)
                if height_match:
                    height = height_match.group(1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                product_type = '–∫–æ—Ä–æ–Ω–∫–∞'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if '–∫–æ—Ä–æ–Ω–∫–∞' in name.lower():
                    product_type = '–∫–æ—Ä–æ–Ω–∫–∞'
                elif '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å' in name.lower():
                    product_type = '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å'
                elif '–±–∞—à–º–∞–∫' in name.lower():
                    product_type = '–±–∞—à–º–∞–∫'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—å–±—É
                thread = matrix  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∑—å–±–∞ = –º–∞—Ç—Ä–∏—Ü–∞
                thread_match = re.search(r'—Ä–µ–∑—å–±–∞ (\w+)', name)
                if thread_match:
                    thread = thread_match.group(1)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ article –∏ code_1c)
                nomenclature = VEDNomenclature(
                    code_1c=article,  # –ö–æ–¥ 1–° —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ code_1c
                    name=name,
                    drilling_depth=drilling_depth,
                    matrix=matrix,
                    article=code_1c,  # –ê—Ä—Ç–∏–∫—É–ª —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ article
                    height=height,
                    thread=thread,
                    product_type=product_type,
                    is_active=True
                )
                
                db.add(nomenclature)
                loaded_count += 1
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {code_1c} - {name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index+1}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        db.close()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
        return False

def create_admin_user(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞"""
    from backend.models import User
    from passlib.context import CryptContext

    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    admin_user = db.query(User).filter(User.role == "admin").first()

    if not admin_user:
        print("üëë –°–æ–∑–¥–∞—é —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞...")

        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å bcrypt
        import hashlib
        hashed_password = f"sha256${hashlib.sha256('admin'.encode()).hexdigest()}"

        admin = User(
            username="admin",
            email="admin@agb-passports.ru",
            full_name="–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            hashed_password=hashed_password,
            role="admin",
            is_active=True
        )

        db.add(admin)
        db.commit()
        print("‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin / admin")
    else:
        print("üëë –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    excel_file = "/app/nomenclature.xlsx"

    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ Excel —Ñ–∞–π–ª–∞...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from sqlalchemy.orm import sessionmaker
    Session = sessionmaker(bind=engine)
    db = Session()

    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # create_admin_user(db)

        if load_nomenclature_from_excel(excel_file):
            print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üí• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    finally:
        db.close()

if __name__ == "__main__":
    main()
