#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ —Ñ–∞–π–ª–∞ "–ö–æ—Ä–æ–Ω–∫–∏ ALFA –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ 21.10.25.xlsx"
"""

import pandas as pd
import sys
import os
from sqlalchemy.orm import Session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.database import get_db, engine
from backend.models import VEDNomenclature

def add_additional_nomenclature():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ—Ä–æ–Ω–æ–∫ ALFA"""
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –∫–æ—Ä–æ–Ω–∫–∞–º–∏ ALFA
        df = pd.read_excel("–ö–æ—Ä–æ–Ω–∫–∏ ALFA –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ 21.10.25.xlsx", header=1)
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –∫–æ—Ä–æ–Ω–æ–∫ ALFA")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Session(engine)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        from backend.models import Base
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        loaded_count = 0
        
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Å—Ç—Ä–æ–∫...")
        
        for index in range(len(df)):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
                columns = list(df.columns)
                if len(columns) < 3:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ {index+1}")
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [–ê—Ä—Ç–∏–∫—É–ª, –ö–æ–¥ 1–°, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ]
                article = str(df.iloc[index, 0]) if not pd.isna(df.iloc[index, 0]) else ''
                code_1c = str(df.iloc[index, 1]) if not pd.isna(df.iloc[index, 1]) else ''
                name = str(df.iloc[index, 2]) if not pd.isna(df.iloc[index, 2]) else ''
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not article or not code_1c or not name:
                    print(f"‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ {index+1}: article='{article}', code_1c='{code_1c}', name='{name}'")
                    continue
                
                print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {index+1}: {article} | {code_1c} | {name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                existing = db.query(VEDNomenclature).filter(VEDNomenclature.code_1c == code_1c).first()
                if existing:
                    print(f"‚ö†Ô∏è –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Å –∫–æ–¥–æ–º {code_1c} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–æ–Ω–∫–∏
                matrix = 'BQ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ—Ä–æ–Ω–æ–∫ ALFA
                drilling_depth = '05-07'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                height = '12'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É (NQ, HQ, PQ, BQ, etc.)
                import re
                if 'NQ' in name:
                    matrix = 'NQ'
                elif 'HQ' in name:
                    matrix = 'HQ'
                elif 'PQ' in name:
                    matrix = 'PQ'
                elif 'BQ' in name:
                    matrix = 'BQ'
                elif 'HWT' in name:
                    matrix = 'HWT'
                elif 'PWT' in name:
                    matrix = 'PWT'
                elif 'HQ3' in name:
                    matrix = 'HQ3'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è
                depth_match = re.search(r'(\d{2}-\d{2})', name)
                if depth_match:
                    drilling_depth = depth_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Å–æ—Ç—É
                height_match = re.search(r'–≤—ã—Å–æ—Ç–∞ (\d+) –º–º', name)
                if height_match:
                    height = height_match.group(1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                product_type = '–∫–æ—Ä–æ–Ω–∫–∞'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if '–∫–æ—Ä–æ–Ω–∫–∞' in name.lower():
                    product_type = '–∫–æ—Ä–æ–Ω–∫–∞'
                elif '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å' in name.lower():
                    product_type = '—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å'
                elif '–±–∞—à–º–∞–∫' in name.lower():
                    product_type = '–±–∞—à–º–∞–∫'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—å–±—É
                thread = matrix  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∑—å–±–∞ = –º–∞—Ç—Ä–∏—Ü–∞
                thread_match = re.search(r'—Ä–µ–∑—å–±–∞ (\w+)', name)
                if thread_match:
                    thread = thread_match.group(1)
                
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ article –∏ code_1c)
                    nomenclature = VEDNomenclature(
                        code_1c=article,  # –ö–æ–¥ 1–° —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ code_1c
                        name=name,
                        drilling_depth=drilling_depth,
                        matrix=matrix,
                        article=code_1c,  # –ê—Ä—Ç–∏–∫—É–ª —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ article
                        height=height,
                        thread=thread,
                        product_type=product_type,
                        is_active=True
                    )
                
                db.add(nomenclature)
                loaded_count += 1
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {code_1c} - {name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {index+1}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        db.close()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {loaded_count} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –∫–æ—Ä–æ–Ω–æ–∫ ALFA...")
    success = add_additional_nomenclature()
    if success:
        print("üéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
