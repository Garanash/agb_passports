"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∫–æ—Ä–æ–Ω–æ–∫
"""

import asyncio
from sqlalchemy.orm import Session
from .database import SessionLocal, create_tables
from .models import VEDNomenclature, User, PassportCounter

def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = db.query(User).filter(User.username == "test_user").first()
        if not test_user:
            test_user = User(
                username="test_user",
                email="test@example.com",
                full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                role="admin",
                is_active=True
            )
            db.add(test_user)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
        test_nomenclature = [
            {
                "code_1c": "3501040",
                "name": "–ê–ª–º–∞–∑–Ω–∞—è –±—É—Ä–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ NQ 3-5",
                "article": "3501040",
                "matrix": "NQ",
                "drilling_depth": "3-5",
                "height": "50",
                "thread": "NQ",
                "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
            },
            {
                "code_1c": "3501041",
                "name": "–ê–ª–º–∞–∑–Ω–∞—è –±—É—Ä–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ HQ 5-7",
                "article": "3501041",
                "matrix": "HQ",
                "drilling_depth": "5-7",
                "height": "60",
                "thread": "HQ",
                "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
            },
            {
                "code_1c": "3501042",
                "name": "–ê–ª–º–∞–∑–Ω–∞—è –±—É—Ä–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ PQ 7-9",
                "article": "3501042",
                "matrix": "PQ",
                "drilling_depth": "7-9",
                "height": "70",
                "thread": "PQ",
                "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
            },
            {
                "code_1c": "3502001",
                "name": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å NQ",
                "article": "3502001",
                "matrix": "NQ",
                "height": "100",
                "thread": "NQ",
                "product_type": "—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å"
            },
            {
                "code_1c": "3503001",
                "name": "–ë–∞—à–º–∞–∫ NQ",
                "article": "3503001",
                "matrix": "NQ",
                "height": "50",
                "thread": "NQ",
                "product_type": "–±–∞—à–º–∞–∫"
            }
        ]
        
        for nom_data in test_nomenclature:
            existing = db.query(VEDNomenclature).filter(VEDNomenclature.code_1c == nom_data["code_1c"]).first()
            if not existing:
                nomenclature = VEDNomenclature(**nom_data)
                db.add(nomenclature)
        
        db.commit()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
        from datetime import datetime
        current_year = datetime.now().year
        counter_name = f"ved_passport_{current_year}"
        
        existing_counter = db.query(PassportCounter).filter(PassportCounter.counter_name == counter_name).first()
        if not existing_counter:
            counter = PassportCounter(
                counter_name=counter_name,
                current_value=0,
                prefix="",
                suffix=str(current_year)[-2:]
            )
            db.add(counter)
            db.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–æ–¥–∞ {current_year}")
        
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    init_test_data()
